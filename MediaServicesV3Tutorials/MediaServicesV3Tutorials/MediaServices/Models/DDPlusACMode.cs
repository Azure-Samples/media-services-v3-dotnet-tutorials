// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for DDPlusACMode.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(DDPlusACModeConverter))]
    public struct DDPlusACMode : System.IEquatable<DDPlusACMode>
    {
        private DDPlusACMode(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Mode 20.
        /// </summary>
        public static readonly DDPlusACMode ACMOD20 = "ACMOD20";

        /// <summary>
        /// Mode 32.
        /// </summary>
        public static readonly DDPlusACMode ACMOD32 = "ACMOD32";


        /// <summary>
        /// Underlying value of enum DDPlusACMode
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for DDPlusACMode
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type DDPlusACMode
        /// </summary>
        public bool Equals(DDPlusACMode e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to DDPlusACMode
        /// </summary>
        public static implicit operator DDPlusACMode(string value)
        {
            return new DDPlusACMode(value);
        }

        /// <summary>
        /// Implicit operator to convert DDPlusACMode to string
        /// </summary>
        public static implicit operator string(DDPlusACMode e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum DDPlusACMode
        /// </summary>
        public static bool operator == (DDPlusACMode e1, DDPlusACMode e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum DDPlusACMode
        /// </summary>
        public static bool operator != (DDPlusACMode e1, DDPlusACMode e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for DDPlusACMode
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is DDPlusACMode && Equals((DDPlusACMode)obj);
        }

        /// <summary>
        /// Returns for hashCode DDPlusACMode
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
