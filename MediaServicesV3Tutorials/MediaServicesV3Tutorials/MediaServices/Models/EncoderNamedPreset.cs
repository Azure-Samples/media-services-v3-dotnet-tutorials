// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for EncoderNamedPreset.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(EncoderNamedPresetConverter))]
    public struct EncoderNamedPreset : System.IEquatable<EncoderNamedPreset>
    {
        private EncoderNamedPreset(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Auto-generate a bitrate ladder (bitrate-resolution pairs) based on
        /// the input resolution and bitrate. The auto-generated preset will
        /// never exceed the input resolution and bitrate. For example, if the
        /// input is 720p at 3Mbps, output will remain 720p at best, and will
        /// start at rates lower than 3Mbps. The output will will have video
        /// and audio in separate files, which is optimal for adaptive
        /// streaming.
        /// </summary>
        public static readonly EncoderNamedPreset AdaptiveStreaming = "AdaptiveStreaming";

        /// <summary>
        /// Auto-generate a bitrate ladder (bitrate-resolution pairs) based on
        /// the input resolution and bitrate. The auto-generated preset will
        /// never exceed the input resolution and bitrate. For example, if the
        /// input is 720p at 3Mbps, output will remain 720p at best, and will
        /// start at rates lower than 3Mbps. The output contains MP4 files with
        /// audio and video interleaved, so that any one MP4 file can be used
        /// for delivery via progressive download, if desired.
        /// </summary>
        public static readonly EncoderNamedPreset ContentAdaptiveMultipleBitrateMP4 = "ContentAdaptiveMultipleBitrateMP4";

        /// <summary>
        /// Produces a single MP4 file containing only stereo audio encoded at
        /// 192 kbps.
        /// </summary>
        public static readonly EncoderNamedPreset AACGoodQualityAudio = "AACGoodQualityAudio";

        /// <summary>
        /// Produces a set of 8 GOP-aligned MP4 files, ranging from 6000 kbps
        /// to 400 kbps, and stereo AAC audio.
        /// </summary>
        public static readonly EncoderNamedPreset H264MultipleBitrate1080p = "H264MultipleBitrate1080p";

        /// <summary>
        /// Produces a set of 6 GOP-aligned MP4 files, ranging from 3400 kbps
        /// to 400 kbps, and stereo AAC audio.
        /// </summary>
        public static readonly EncoderNamedPreset H264MultipleBitrate720p = "H264MultipleBitrate720p";


        /// <summary>
        /// Underlying value of enum EncoderNamedPreset
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for EncoderNamedPreset
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type EncoderNamedPreset
        /// </summary>
        public bool Equals(EncoderNamedPreset e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to EncoderNamedPreset
        /// </summary>
        public static implicit operator EncoderNamedPreset(string value)
        {
            return new EncoderNamedPreset(value);
        }

        /// <summary>
        /// Implicit operator to convert EncoderNamedPreset to string
        /// </summary>
        public static implicit operator string(EncoderNamedPreset e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum EncoderNamedPreset
        /// </summary>
        public static bool operator == (EncoderNamedPreset e1, EncoderNamedPreset e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum EncoderNamedPreset
        /// </summary>
        public static bool operator != (EncoderNamedPreset e1, EncoderNamedPreset e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for EncoderNamedPreset
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is EncoderNamedPreset && Equals((EncoderNamedPreset)obj);
        }

        /// <summary>
        /// Returns for hashCode EncoderNamedPreset
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
