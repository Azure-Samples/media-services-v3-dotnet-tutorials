// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An object to represent EAC3 audio encoding settings.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Media.DDPlusAudio")]
    public partial class DDPlusAudio : Audio
    {
        /// <summary>
        /// Initializes a new instance of the DDPlusAudio class.
        /// </summary>
        public DDPlusAudio()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DDPlusAudio class.
        /// </summary>
        /// <param name="lfEon">Gets or sets a value indicating whether "LFE"
        /// is on.</param>
        /// <param name="acMode">Gets or sets the AC mode. Possible values
        /// include: 'ACMOD20', 'ACMOD32'</param>
        /// <param name="label">Gets or sets the codec label.</param>
        /// <param name="channels">Gets or sets number of channels in the
        /// Audio.</param>
        /// <param name="samplingRate">Gets or sets the sampling rate to use
        /// for encoding.</param>
        /// <param name="bitrate">Gets or sets the bitrate of the encoded
        /// audio.</param>
        public DDPlusAudio(bool lfEon, DDPlusACMode acMode, string label = default(string), int? channels = default(int?), int? samplingRate = default(int?), int? bitrate = default(int?))
            : base(label, channels, samplingRate, bitrate)
        {
            LfEon = lfEon;
            AcMode = acMode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a value indicating whether "LFE" is on.
        /// </summary>
        [JsonProperty(PropertyName = "lfEon")]
        public bool LfEon { get; set; }

        /// <summary>
        /// Gets or sets the AC mode. Possible values include: 'ACMOD20',
        /// 'ACMOD32'
        /// </summary>
        [JsonProperty(PropertyName = "acMode")]
        public DDPlusACMode AcMode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}
