// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Default base class for all Audio codecs.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Media.Audio")]
    public partial class Audio : Codec
    {
        /// <summary>
        /// Initializes a new instance of the Audio class.
        /// </summary>
        public Audio()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Audio class.
        /// </summary>
        /// <param name="label">Gets or sets the codec label.</param>
        /// <param name="channels">Gets or sets number of channels in the
        /// Audio.</param>
        /// <param name="samplingRate">Gets or sets the sampling rate to use
        /// for encoding.</param>
        /// <param name="bitrate">Gets or sets the bitrate of the encoded
        /// audio.</param>
        public Audio(string label = default(string), int? channels = default(int?), int? samplingRate = default(int?), int? bitrate = default(int?))
            : base(label)
        {
            Channels = channels;
            SamplingRate = samplingRate;
            Bitrate = bitrate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets number of channels in the Audio.
        /// </summary>
        [JsonProperty(PropertyName = "channels")]
        public int? Channels { get; set; }

        /// <summary>
        /// Gets or sets the sampling rate to use for encoding.
        /// </summary>
        [JsonProperty(PropertyName = "samplingRate")]
        public int? SamplingRate { get; set; }

        /// <summary>
        /// Gets or sets the bitrate of the encoded audio.
        /// </summary>
        [JsonProperty(PropertyName = "bitrate")]
        public int? Bitrate { get; set; }

    }
}
