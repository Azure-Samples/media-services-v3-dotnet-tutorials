// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for ClosedCaptionType.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ClosedCaptionTypeConverter))]
    public struct ClosedCaptionType : System.IEquatable<ClosedCaptionType>
    {
        private ClosedCaptionType(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// The closed caption as a separate file
        /// </summary>
        public static readonly ClosedCaptionType SideCar = "SideCar";

        /// <summary>
        /// The closed caption as a separate stream inside media file
        /// </summary>
        public static readonly ClosedCaptionType Stream = "Stream";

        /// <summary>
        /// The closed caption embedded within video elementary stream
        /// </summary>
        public static readonly ClosedCaptionType Embedded = "Embedded";


        /// <summary>
        /// Underlying value of enum ClosedCaptionType
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for ClosedCaptionType
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type ClosedCaptionType
        /// </summary>
        public bool Equals(ClosedCaptionType e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to ClosedCaptionType
        /// </summary>
        public static implicit operator ClosedCaptionType(string value)
        {
            return new ClosedCaptionType(value);
        }

        /// <summary>
        /// Implicit operator to convert ClosedCaptionType to string
        /// </summary>
        public static implicit operator string(ClosedCaptionType e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum ClosedCaptionType
        /// </summary>
        public static bool operator == (ClosedCaptionType e1, ClosedCaptionType e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum ClosedCaptionType
        /// </summary>
        public static bool operator != (ClosedCaptionType e1, ClosedCaptionType e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for ClosedCaptionType
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is ClosedCaptionType && Equals((ClosedCaptionType)obj);
        }

        /// <summary>
        /// Returns for hashCode ClosedCaptionType
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
