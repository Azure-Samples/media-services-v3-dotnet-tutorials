// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for VideoSyncMode.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(VideoSyncModeConverter))]
    public struct VideoSyncMode : System.IEquatable<VideoSyncMode>
    {
        private VideoSyncMode(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Chooses between CFR and VFR depending on muxer capabilities. This
        /// is the default method
        /// </summary>
        public static readonly VideoSyncMode Auto = "Auto";

        /// <summary>
        /// Each frame is passed with its timestamp from the de-muxer to the
        /// muxer Not expose this mode now as we do not see any useful
        /// scenarios out of it
        /// </summary>
        public static readonly VideoSyncMode Passthrough = "Passthrough";

        /// <summary>
        /// Frames will be duplicated and/or dropped to achieve exactly the
        /// requested constant frame rate
        /// </summary>
        public static readonly VideoSyncMode Cfr = "Cfr";

        /// <summary>
        /// Frames are passed through with their timestamp or dropped so as to
        /// prevent 2 frames from having the same timestamp
        /// </summary>
        public static readonly VideoSyncMode Vfr = "Vfr";

        /// <summary>
        /// As pass through but destroys all timestamps, making the muxer
        /// generate fresh timestamps based on frame-rate
        /// </summary>
        public static readonly VideoSyncMode Drop = "Drop";


        /// <summary>
        /// Underlying value of enum VideoSyncMode
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for VideoSyncMode
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type VideoSyncMode
        /// </summary>
        public bool Equals(VideoSyncMode e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to VideoSyncMode
        /// </summary>
        public static implicit operator VideoSyncMode(string value)
        {
            return new VideoSyncMode(value);
        }

        /// <summary>
        /// Implicit operator to convert VideoSyncMode to string
        /// </summary>
        public static implicit operator string(VideoSyncMode e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum VideoSyncMode
        /// </summary>
        public static bool operator == (VideoSyncMode e1, VideoSyncMode e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum VideoSyncMode
        /// </summary>
        public static bool operator != (VideoSyncMode e1, VideoSyncMode e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for VideoSyncMode
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is VideoSyncMode && Equals((VideoSyncMode)obj);
        }

        /// <summary>
        /// Returns for hashCode VideoSyncMode
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
