// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for StreamSelectionMode.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(StreamSelectionModeConverter))]
    public struct StreamSelectionMode : System.IEquatable<StreamSelectionMode>
    {
        private StreamSelectionMode(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Preset does not set the stream selection
        /// </summary>
        public static readonly StreamSelectionMode SelectionNotSet = "SelectionNotSet";

        /// <summary>
        /// Select the highest bitrate stream
        /// </summary>
        public static readonly StreamSelectionMode SelectHighestBitrateStream = "SelectHighestBitrateStream";

        /// <summary>
        /// Select the lowest bitrate stream
        /// </summary>
        public static readonly StreamSelectionMode SelectLowestBitrateStream = "SelectLowestBitrateStream";

        /// <summary>
        /// Select all the streams
        /// </summary>
        public static readonly StreamSelectionMode SelectAllStreams = "SelectAllStreams";


        /// <summary>
        /// Underlying value of enum StreamSelectionMode
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for StreamSelectionMode
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type StreamSelectionMode
        /// </summary>
        public bool Equals(StreamSelectionMode e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to StreamSelectionMode
        /// </summary>
        public static implicit operator StreamSelectionMode(string value)
        {
            return new StreamSelectionMode(value);
        }

        /// <summary>
        /// Implicit operator to convert StreamSelectionMode to string
        /// </summary>
        public static implicit operator string(StreamSelectionMode e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum StreamSelectionMode
        /// </summary>
        public static bool operator == (StreamSelectionMode e1, StreamSelectionMode e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum StreamSelectionMode
        /// </summary>
        public static bool operator != (StreamSelectionMode e1, StreamSelectionMode e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for StreamSelectionMode
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is StreamSelectionMode && Equals((StreamSelectionMode)obj);
        }

        /// <summary>
        /// Returns for hashCode StreamSelectionMode
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
