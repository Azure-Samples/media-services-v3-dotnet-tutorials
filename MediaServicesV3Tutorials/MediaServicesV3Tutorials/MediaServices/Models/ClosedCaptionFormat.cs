// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for ClosedCaptionFormat.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(ClosedCaptionFormatConverter))]
    public struct ClosedCaptionFormat : System.IEquatable<ClosedCaptionFormat>
    {
        private ClosedCaptionFormat(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// TTML format.
        /// </summary>
        public static readonly ClosedCaptionFormat Ttml = "Ttml";

        /// <summary>
        /// Web VTT format.
        /// </summary>
        public static readonly ClosedCaptionFormat WebVtt = "WebVtt";


        /// <summary>
        /// Underlying value of enum ClosedCaptionFormat
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for ClosedCaptionFormat
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type ClosedCaptionFormat
        /// </summary>
        public bool Equals(ClosedCaptionFormat e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to ClosedCaptionFormat
        /// </summary>
        public static implicit operator ClosedCaptionFormat(string value)
        {
            return new ClosedCaptionFormat(value);
        }

        /// <summary>
        /// Implicit operator to convert ClosedCaptionFormat to string
        /// </summary>
        public static implicit operator string(ClosedCaptionFormat e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum ClosedCaptionFormat
        /// </summary>
        public static bool operator == (ClosedCaptionFormat e1, ClosedCaptionFormat e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum ClosedCaptionFormat
        /// </summary>
        public static bool operator != (ClosedCaptionFormat e1, ClosedCaptionFormat e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for ClosedCaptionFormat
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is ClosedCaptionFormat && Equals((ClosedCaptionFormat)obj);
        }

        /// <summary>
        /// Returns for hashCode ClosedCaptionFormat
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
