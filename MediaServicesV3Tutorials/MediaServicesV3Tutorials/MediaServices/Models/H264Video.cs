// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// An object to represent H264 video encoding.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Media.H264Video")]
    public partial class H264Video : Video
    {
        /// <summary>
        /// Initializes a new instance of the H264Video class.
        /// </summary>
        public H264Video()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the H264Video class.
        /// </summary>
        /// <param name="label">Gets or sets the codec label.</param>
        /// <param name="preserveResolutionAfterRotation">Gets or sets a value
        /// indicating whether to disable resolution change rotation.</param>
        /// <param name="keyFrameInterval">Gets or sets the distance between
        /// two key frames.</param>
        /// <param name="stretchMode">Gets or sets the Resolution Mode.
        /// Possible values include: 'None', 'AutoSize', 'AutoFit'</param>
        /// <param name="syncMode">Gets or sets the Video Sync Mode. Possible
        /// values include: 'Auto', 'Passthrough', 'Cfr', 'Vfr', 'Drop'</param>
        /// <param name="sceneChangeDetection">Gets or sets a value indicating
        /// whether to use scene change detection during encoding</param>
        /// <param name="rateControlMode">Gets or sets the video rate control
        /// mode. Possible values include: 'ABR', 'CBR'</param>
        /// <param name="complexity">Gets or sets the encoder complexity mode
        /// used for all layers. Possible values include: 'Speed', 'Balanced',
        /// 'Quality'</param>
        /// <param name="layers">Gets the layers for the video.</param>
        public H264Video(string label = default(string), bool? preserveResolutionAfterRotation = default(bool?), System.TimeSpan? keyFrameInterval = default(System.TimeSpan?), StretchMode? stretchMode = default(StretchMode?), VideoSyncMode? syncMode = default(VideoSyncMode?), bool? sceneChangeDetection = default(bool?), H264RateControlMode? rateControlMode = default(H264RateControlMode?), H264Complexity? complexity = default(H264Complexity?), IList<H264Layer> layers = default(IList<H264Layer>))
            : base(label, preserveResolutionAfterRotation, keyFrameInterval, stretchMode, syncMode)
        {
            SceneChangeDetection = sceneChangeDetection;
            RateControlMode = rateControlMode;
            Complexity = complexity;
            Layers = layers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a value indicating whether to use scene change
        /// detection during encoding
        /// </summary>
        [JsonProperty(PropertyName = "sceneChangeDetection")]
        public bool? SceneChangeDetection { get; set; }

        /// <summary>
        /// Gets or sets the video rate control mode. Possible values include:
        /// 'ABR', 'CBR'
        /// </summary>
        [JsonProperty(PropertyName = "rateControlMode")]
        public H264RateControlMode? RateControlMode { get; set; }

        /// <summary>
        /// Gets or sets the encoder complexity mode used for all layers.
        /// Possible values include: 'Speed', 'Balanced', 'Quality'
        /// </summary>
        [JsonProperty(PropertyName = "complexity")]
        public H264Complexity? Complexity { get; set; }

        /// <summary>
        /// Gets the layers for the video.
        /// </summary>
        [JsonProperty(PropertyName = "layers")]
        public IList<H264Layer> Layers { get; set; }

    }
}
