// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Azure.OData;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TransformsOperations.
    /// </summary>
    public static partial class TransformsOperationsExtensions
    {
            /// <summary>
            /// List Transforms
            /// </summary>
            /// <remarks>
            /// Lists the Transforms in the account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static IPage<Transform> List(this ITransformsOperations operations, ODataQuery<Transform> odataQuery = default(ODataQuery<Transform>))
            {
                return operations.ListAsync(odataQuery).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Transforms
            /// </summary>
            /// <remarks>
            /// Lists the Transforms in the account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Transform>> ListAsync(this ITransformsOperations operations, ODataQuery<Transform> odataQuery = default(ODataQuery<Transform>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Transform
            /// </summary>
            /// <remarks>
            /// Gets a Transform.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            public static Transform Get(this ITransformsOperations operations, string transformName)
            {
                return operations.GetAsync(transformName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Transform
            /// </summary>
            /// <remarks>
            /// Gets a Transform.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Transform> GetAsync(this ITransformsOperations operations, string transformName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(transformName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or Update Transform
            /// </summary>
            /// <remarks>
            /// Creates or updates a new Transform.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='parameters'>
            /// </param>
            public static Transform CreateOrUpdate(this ITransformsOperations operations, string transformName, Transform parameters)
            {
                return operations.CreateOrUpdateAsync(transformName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or Update Transform
            /// </summary>
            /// <remarks>
            /// Creates or updates a new Transform.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Transform> CreateOrUpdateAsync(this ITransformsOperations operations, string transformName, Transform parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(transformName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Transform
            /// </summary>
            /// <remarks>
            /// Deletes a Transform.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            public static void Delete(this ITransformsOperations operations, string transformName)
            {
                operations.DeleteAsync(transformName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Transform
            /// </summary>
            /// <remarks>
            /// Deletes a Transform.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ITransformsOperations operations, string transformName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(transformName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update Transform
            /// </summary>
            /// <remarks>
            /// Updates a Transform.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='parameters'>
            /// </param>
            public static Transform Update(this ITransformsOperations operations, string transformName, Transform parameters)
            {
                return operations.UpdateAsync(transformName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update Transform
            /// </summary>
            /// <remarks>
            /// Updates a Transform.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='transformName'>
            /// The Transform name.
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Transform> UpdateAsync(this ITransformsOperations operations, string transformName, Transform parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(transformName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List Transforms
            /// </summary>
            /// <remarks>
            /// Lists the Transforms in the account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Transform> ListNext(this ITransformsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Transforms
            /// </summary>
            /// <remarks>
            /// Lists the Transforms in the account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Transform>> ListNextAsync(this ITransformsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
