// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MediaservicesOperations.
    /// </summary>
    public static partial class MediaservicesOperationsExtensions
    {
            /// <summary>
            /// List Media Services accounts
            /// </summary>
            /// <remarks>
            /// List Media Services accounts in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static MediaServiceCollection List(this IMediaservicesOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Media Services accounts
            /// </summary>
            /// <remarks>
            /// List Media Services accounts in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaServiceCollection> ListAsync(this IMediaservicesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Media Services account
            /// </summary>
            /// <remarks>
            /// Get the details of a Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            public static MediaService Get(this IMediaservicesOperations operations, string accountName)
            {
                return operations.GetAsync(accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Media Services account
            /// </summary>
            /// <remarks>
            /// Get the details of a Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaService> GetAsync(this IMediaservicesOperations operations, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a Media Services account
            /// </summary>
            /// <remarks>
            /// Creates or updates a Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='parameters'>
            /// The request parameters.
            /// </param>
            public static MediaService CreateOrUpdate(this IMediaservicesOperations operations, string accountName, MediaService parameters)
            {
                return operations.CreateOrUpdateAsync(accountName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Media Services account
            /// </summary>
            /// <remarks>
            /// Creates or updates a Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='parameters'>
            /// The request parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaService> CreateOrUpdateAsync(this IMediaservicesOperations operations, string accountName, MediaService parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(accountName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Media Services account.
            /// </summary>
            /// <remarks>
            /// Deletes a Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            public static void Delete(this IMediaservicesOperations operations, string accountName)
            {
                operations.DeleteAsync(accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Media Services account.
            /// </summary>
            /// <remarks>
            /// Deletes a Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IMediaservicesOperations operations, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(accountName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update a Media Services account
            /// </summary>
            /// <remarks>
            /// Updates an existing Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='parameters'>
            /// The request parameters.
            /// </param>
            public static MediaService Update(this IMediaservicesOperations operations, string accountName, MediaService parameters)
            {
                return operations.UpdateAsync(accountName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Media Services account
            /// </summary>
            /// <remarks>
            /// Updates an existing Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='parameters'>
            /// The request parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MediaService> UpdateAsync(this IMediaservicesOperations operations, string accountName, MediaService parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(accountName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Synchronizes Storage Account Keys
            /// </summary>
            /// <remarks>
            /// Synchronizes storage account keys for a storage account associated with the
            /// Media Service account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='parameters'>
            /// The request parameters.
            /// </param>
            public static void SyncStorageKeys(this IMediaservicesOperations operations, string accountName, SyncStorageKeysInput parameters)
            {
                operations.SyncStorageKeysAsync(accountName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Synchronizes Storage Account Keys
            /// </summary>
            /// <remarks>
            /// Synchronizes storage account keys for a storage account associated with the
            /// Media Service account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='parameters'>
            /// The request parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task SyncStorageKeysAsync(this IMediaservicesOperations operations, string accountName, SyncStorageKeysInput parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.SyncStorageKeysWithHttpMessagesAsync(accountName, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// List Media Services accounts
            /// </summary>
            /// <remarks>
            /// List Media Services accounts in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static SubscriptionMediaServiceCollection ListBySubscription(this IMediaservicesOperations operations)
            {
                return operations.ListBySubscriptionAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List Media Services accounts
            /// </summary>
            /// <remarks>
            /// List Media Services accounts in the subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionMediaServiceCollection> ListBySubscriptionAsync(this IMediaservicesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Media Services account
            /// </summary>
            /// <remarks>
            /// Get the details of a Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            public static SubscriptionMediaService GetBySubscription(this IMediaservicesOperations operations, string accountName)
            {
                return operations.GetBySubscriptionAsync(accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Media Services account
            /// </summary>
            /// <remarks>
            /// Get the details of a Media Services account
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The Media Services account name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionMediaService> GetBySubscriptionAsync(this IMediaservicesOperations operations, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBySubscriptionWithHttpMessagesAsync(accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
