// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Represents an Asset used as a JobOutput.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Media.JobOutputAsset")]
    public partial class JobOutputAsset : JobOutput
    {
        /// <summary>
        /// Initializes a new instance of the JobOutputAsset class.
        /// </summary>
        public JobOutputAsset()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobOutputAsset class.
        /// </summary>
        /// <param name="assetName">Path to the asset such as
        /// "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}".</param>
        /// <param name="error">If the JobOutput is in the error state, it
        /// contains the details of the error.</param>
        /// <param name="state">State of the JobOutput. Possible values
        /// include: 'Canceled', 'Canceling', 'Error', 'Finished',
        /// 'Processing', 'Queued', 'Scheduled'</param>
        /// <param name="progress">If the JobOutput is in the processing state,
        /// it contains the percentage of the job completed from 0 to 100
        /// percent.</param>
        public JobOutputAsset(string assetName, JobError error = default(JobError), JobState state = default(JobState), int progress = default(int))
            : base(error, state, progress)
        {
            AssetName = assetName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets path to the asset such as
        /// "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}".
        /// </summary>
        [JsonProperty(PropertyName = "assetName")]
        public string AssetName { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (AssetName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AssetName");
            }
        }
    }
}
