// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes all the settings to be used when encoding the input video
    /// with the Standard Encoder.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Media.StandardEncoderPreset")]
    public partial class StandardEncoderPreset : Preset
    {
        /// <summary>
        /// Initializes a new instance of the StandardEncoderPreset class.
        /// </summary>
        public StandardEncoderPreset()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StandardEncoderPreset class.
        /// </summary>
        /// <param name="filters">Describes the default set of filters to be
        /// applied to all the input media (except overlays). Describes
        /// operations like rotation, deinterlacing and overlays.</param>
        /// <param name="codecs">Describes the list of codecs to be used when
        /// encoding the input video.</param>
        /// <param name="formats">Describes the list of outputs to be produced
        /// by the encoder.</param>
        public StandardEncoderPreset(Filters filters = default(Filters), IList<Codec> codecs = default(IList<Codec>), IList<Format> formats = default(IList<Format>))
        {
            Filters = filters;
            Codecs = codecs;
            Formats = formats;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets describes the default set of filters to be applied to
        /// all the input media (except overlays). Describes operations like
        /// rotation, deinterlacing and overlays.
        /// </summary>
        [JsonProperty(PropertyName = "filters")]
        public Filters Filters { get; set; }

        /// <summary>
        /// Gets or sets describes the list of codecs to be used when encoding
        /// the input video.
        /// </summary>
        [JsonProperty(PropertyName = "codecs")]
        public IList<Codec> Codecs { get; set; }

        /// <summary>
        /// Gets or sets describes the list of outputs to be produced by the
        /// encoder.
        /// </summary>
        [JsonProperty(PropertyName = "formats")]
        public IList<Format> Formats { get; set; }

    }
}
