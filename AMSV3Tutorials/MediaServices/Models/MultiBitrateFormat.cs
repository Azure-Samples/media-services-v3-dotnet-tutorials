// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Describes the properties for producing a collection of GOP aligned
    /// multi bitrate files.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Media.MultiBitrateFormat")]
    public partial class MultiBitrateFormat : Format
    {
        /// <summary>
        /// Initializes a new instance of the MultiBitrateFormat class.
        /// </summary>
        public MultiBitrateFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MultiBitrateFormat class.
        /// </summary>
        /// <param name="filenamePattern">Describes the pattern of the file
        /// names for the generated output files. The following macros are
        /// supported in the file name: {Basename} - The base name of the input
        /// video {Extension} - The appropriate extension for this format.
        /// {Label} - The label assigned to the codec/layer. {Index} - A unique
        /// index for thumbnails. Only applicable to thumbnails. {Bitrate} -
        /// The audio/video bitrate. Not applicable to thumbnails. {Codec} -
        /// The type of the audio/video codec. Any unsubstituted macros will be
        /// collapsed and removed from the filename.</param>
        /// <param name="outputFiles">Describes a list of output files to
        /// produce.  Each entry in the list is a set of labels to be muxed
        /// together .</param>
        public MultiBitrateFormat(string filenamePattern = default(string), IList<OutputFile> outputFiles = default(IList<OutputFile>))
            : base(filenamePattern)
        {
            OutputFiles = outputFiles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets describes a list of output files to produce.  Each
        /// entry in the list is a set of labels to be muxed together .
        /// </summary>
        [JsonProperty(PropertyName = "outputFiles")]
        public IList<OutputFile> OutputFiles { get; set; }

    }
}
