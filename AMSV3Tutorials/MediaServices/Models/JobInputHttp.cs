// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents http job input.
    /// </summary>
    [Newtonsoft.Json.JsonObject("#Microsoft.Media.JobInputHttp")]
    public partial class JobInputHttp : JobInputClip
    {
        /// <summary>
        /// Initializes a new instance of the JobInputHttp class.
        /// </summary>
        public JobInputHttp()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobInputHttp class.
        /// </summary>
        /// <param name="label">Label of the JobInput.  Used to match JobInputs
        /// to TransformInputs.  If no Label is given then the JobInputs are
        /// matched by index.</param>
        /// <param name="files">List of files.  Required for JobInputAzureBlob.
        /// It optionally can be used for JobInputAsset to tell the service to
        /// only use the files specified from the Asset.</param>
        /// <param name="baseUri">Base uri for http job input. It will be
        /// concatenated with provided file names.   If no base uri is given,
        /// then the provided file list is assumed to be fully qualified
        /// uris.</param>
        public JobInputHttp(string label = default(string), IList<string> files = default(IList<string>), string baseUri = default(string))
            : base(label, files)
        {
            BaseUri = baseUri;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets base uri for http job input. It will be concatenated
        /// with provided file names.   If no base uri is given, then the
        /// provided file list is assumed to be fully qualified uris.
        /// </summary>
        [JsonProperty(PropertyName = "baseUri")]
        public string BaseUri { get; set; }

    }
}
