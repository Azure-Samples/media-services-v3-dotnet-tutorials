// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// An Asset.
    /// </summary>
    [JsonTransformation]
    public partial class Asset : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the Asset class.
        /// </summary>
        public Asset()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Asset class.
        /// </summary>
        /// <param name="id">Fully qualified resource ID for the
        /// resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="assetId">The Asset ID.</param>
        /// <param name="created">The creation date of the Asset.</param>
        /// <param name="lastModified">The last modified date of the
        /// Asset.</param>
        /// <param name="alternateId">The alternate ID of the Asset.</param>
        /// <param name="description">The Asset description.</param>
        /// <param name="container">The name of the asset blob
        /// container.</param>
        /// <param name="storageAccountId">The ARM resource ID of the Azure
        /// Storage account containing the Asset.</param>
        /// <param name="storageEncryptionFormat">The Asset encryption format.
        /// One of None, MediaStorageEncryption, StaticCommonEncryption or
        /// StaticEnvelopeEncryption. Possible values include: 'None',
        /// 'MediaStorageClientEncryption', 'StaticCommonEncryption',
        /// 'StaticEnvelopeEncryption'</param>
        /// <param name="storageEncryptionKey">The Base64 encoded key for the
        /// Asset storage encryption.</param>
        public Asset(string id = default(string), string name = default(string), string type = default(string), System.Guid assetId = default(System.Guid), System.DateTimeOffset created = default(System.DateTimeOffset), System.DateTimeOffset lastModified = default(System.DateTimeOffset), string alternateId = default(string), string description = default(string), string container = default(string), string storageAccountId = default(string), AssetStorageEncryptionFormat? storageEncryptionFormat = default(AssetStorageEncryptionFormat?), string storageEncryptionKey = default(string))
            : base(id, name, type)
        {
            AssetId = assetId;
            Created = created;
            LastModified = lastModified;
            AlternateId = alternateId;
            Description = description;
            Container = container;
            StorageAccountId = storageAccountId;
            StorageEncryptionFormat = storageEncryptionFormat;
            StorageEncryptionKey = storageEncryptionKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the Asset ID.
        /// </summary>
        [JsonProperty(PropertyName = "properties.assetId")]
        public System.Guid AssetId { get; private set; }

        /// <summary>
        /// Gets the creation date of the Asset.
        /// </summary>
        [JsonProperty(PropertyName = "properties.created")]
        public System.DateTimeOffset Created { get; private set; }

        /// <summary>
        /// Gets the last modified date of the Asset.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModified")]
        public System.DateTimeOffset LastModified { get; private set; }

        /// <summary>
        /// Gets or sets the alternate ID of the Asset.
        /// </summary>
        [JsonProperty(PropertyName = "properties.alternateId")]
        public string AlternateId { get; set; }

        /// <summary>
        /// Gets or sets the Asset description.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the name of the asset blob container.
        /// </summary>
        [JsonProperty(PropertyName = "properties.container")]
        public string Container { get; set; }

        /// <summary>
        /// Gets or sets the ARM resource ID of the Azure Storage account
        /// containing the Asset.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageAccountId")]
        public string StorageAccountId { get; set; }

        /// <summary>
        /// Gets or sets the Asset encryption format. One of None,
        /// MediaStorageEncryption, StaticCommonEncryption or
        /// StaticEnvelopeEncryption. Possible values include: 'None',
        /// 'MediaStorageClientEncryption', 'StaticCommonEncryption',
        /// 'StaticEnvelopeEncryption'
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageEncryptionFormat")]
        public AssetStorageEncryptionFormat? StorageEncryptionFormat { get; set; }

        /// <summary>
        /// Gets or sets the Base64 encoded key for the Asset storage
        /// encryption.
        /// </summary>
        [JsonProperty(PropertyName = "properties.storageEncryptionKey")]
        public string StorageEncryptionKey { get; set; }

    }
}
