// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Akamai Signature Header authentication key.
    /// </summary>
    public partial class AkamaiSignatureHeaderAuthenticationKey
    {
        /// <summary>
        /// Initializes a new instance of the
        /// AkamaiSignatureHeaderAuthenticationKey class.
        /// </summary>
        public AkamaiSignatureHeaderAuthenticationKey()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// AkamaiSignatureHeaderAuthenticationKey class.
        /// </summary>
        /// <param name="identifier">identifier of the key</param>
        /// <param name="base64Key">authentication key</param>
        /// <param name="expiration">The exact time the authentication
        /// key.</param>
        public AkamaiSignatureHeaderAuthenticationKey(string identifier = default(string), string base64Key = default(string), System.DateTimeOffset? expiration = default(System.DateTimeOffset?))
        {
            Identifier = identifier;
            Base64Key = base64Key;
            Expiration = expiration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets identifier of the key
        /// </summary>
        [JsonProperty(PropertyName = "identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// Gets or sets authentication key
        /// </summary>
        [JsonProperty(PropertyName = "base64Key")]
        public string Base64Key { get; set; }

        /// <summary>
        /// Gets or sets the exact time the authentication key.
        /// </summary>
        [JsonProperty(PropertyName = "expiration")]
        public System.DateTimeOffset? Expiration { get; set; }

    }
}
