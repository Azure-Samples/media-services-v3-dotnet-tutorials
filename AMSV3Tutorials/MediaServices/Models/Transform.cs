// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A Media Transform that can be applied to an input by creating Jobs.
    /// </summary>
    [JsonTransformation]
    public partial class Transform : IResource
    {
        /// <summary>
        /// Initializes a new instance of the Transform class.
        /// </summary>
        public Transform()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Transform class.
        /// </summary>
        /// <param name="outputs">The outputs for the Transform.</param>
        /// <param name="name">The resource name.</param>
        /// <param name="id">The resource ID.</param>
        /// <param name="type">The resource type.</param>
        /// <param name="location">The resource location.</param>
        /// <param name="tags">Optional resource tags.</param>
        /// <param name="created">The date and time when the Transform was
        /// created.</param>
        /// <param name="description">Customer supplied description of the
        /// transform.</param>
        /// <param name="lastModified">The date and time when the Transform was
        /// last updated.</param>
        public Transform(IList<TransformOutput> outputs, string name = default(string), string id = default(string), string type = default(string), string location = default(string), object tags = default(object), System.DateTimeOffset created = default(System.DateTimeOffset), string description = default(string), System.DateTimeOffset lastModified = default(System.DateTimeOffset))
        {
            Name = name;
            Id = id;
            Type = type;
            Location = location;
            Tags = tags;
            Created = created;
            Description = description;
            LastModified = lastModified;
            Outputs = outputs;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the resource name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; private set; }

        /// <summary>
        /// Gets the resource ID.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; private set; }

        /// <summary>
        /// Gets the resource type.
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; private set; }

        /// <summary>
        /// Gets or sets the resource location.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets optional resource tags.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public object Tags { get; set; }

        /// <summary>
        /// Gets the date and time when the Transform was created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.created")]
        public System.DateTimeOffset Created { get; private set; }

        /// <summary>
        /// Gets or sets customer supplied description of the transform.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets the date and time when the Transform was last updated.
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModified")]
        public System.DateTimeOffset LastModified { get; private set; }

        /// <summary>
        /// Gets or sets the outputs for the Transform.
        /// </summary>
        [JsonProperty(PropertyName = "properties.outputs")]
        public IList<TransformOutput> Outputs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Outputs == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Outputs");
            }
            if (Outputs != null)
            {
                foreach (var element in Outputs)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
