// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;

    /// <summary>
    /// Defines values for StretchMode.
    /// </summary>
    /// <summary>
    /// Determine base value for a given allowed value if exists, else return
    /// the value itself
    /// </summary>
    [JsonConverter(typeof(StretchModeConverter))]
    public struct StretchMode : System.IEquatable<StretchMode>
    {
        private StretchMode(string underlyingValue)
        {
            UnderlyingValue=underlyingValue;
        }

        /// <summary>
        /// Strictly respect the output resolution without considering the
        /// aspect ratio.
        /// </summary>
        public static readonly StretchMode None = "None";

        /// <summary>
        /// Override the output resolution to keep the same aspect ratio
        /// between input and output without padding.
        /// </summary>
        public static readonly StretchMode AutoSize = "AutoSize";

        /// <summary>
        /// Pad the output (with either letterbox or pillar box) to keep the
        /// same aspect ratio between input and output.
        /// </summary>
        public static readonly StretchMode AutoFit = "AutoFit";


        /// <summary>
        /// Underlying value of enum StretchMode
        /// </summary>
        private readonly string UnderlyingValue;

        /// <summary>
        /// Returns string representation for StretchMode
        /// </summary>
        public override string ToString()
        {
            return UnderlyingValue.ToString();
        }

        /// <summary>
        /// Compares enums of type StretchMode
        /// </summary>
        public bool Equals(StretchMode e)
        {
            return UnderlyingValue.Equals(e.UnderlyingValue);
        }

        /// <summary>
        /// Implicit operator to convert string to StretchMode
        /// </summary>
        public static implicit operator StretchMode(string value)
        {
            return new StretchMode(value);
        }

        /// <summary>
        /// Implicit operator to convert StretchMode to string
        /// </summary>
        public static implicit operator string(StretchMode e)
        {
            return e.UnderlyingValue;
        }

        /// <summary>
        /// Overriding == operator for enum StretchMode
        /// </summary>
        public static bool operator == (StretchMode e1, StretchMode e2)
        {
            return e2.Equals(e1);
        }

        /// <summary>
        /// Overriding != operator for enum StretchMode
        /// </summary>
        public static bool operator != (StretchMode e1, StretchMode e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>
        /// Overrides Equals operator for StretchMode
        /// </summary>
        public override bool Equals(object obj)
        {
            return obj is StretchMode && Equals((StretchMode)obj);
        }

        /// <summary>
        /// Returns for hashCode StretchMode
        /// </summary>
        public override int GetHashCode()
        {
            return UnderlyingValue.GetHashCode();
        }

    }
}
