// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// A Content Key Policy resource.
    /// </summary>
    [JsonTransformation]
    public partial class ContentKeyPolicy : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ContentKeyPolicy class.
        /// </summary>
        public ContentKeyPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContentKeyPolicy class.
        /// </summary>
        /// <param name="options">The Key Policy options.</param>
        /// <param name="id">Fully qualified resource ID for the
        /// resource.</param>
        /// <param name="name">The name of the resource.</param>
        /// <param name="type">The type of the resource.</param>
        /// <param name="policyId">The legacy Policy ID.</param>
        /// <param name="created">The creation date of the Policy</param>
        /// <param name="lastModified">The last modified date of the
        /// Policy</param>
        /// <param name="description">A description for the Policy.</param>
        public ContentKeyPolicy(IList<ContentKeyPolicyOption> options, string id = default(string), string name = default(string), string type = default(string), System.Guid policyId = default(System.Guid), System.DateTimeOffset created = default(System.DateTimeOffset), System.DateTimeOffset lastModified = default(System.DateTimeOffset), string description = default(string))
            : base(id, name, type)
        {
            PolicyId = policyId;
            Created = created;
            LastModified = lastModified;
            Description = description;
            Options = options;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the legacy Policy ID.
        /// </summary>
        [JsonProperty(PropertyName = "properties.policyId")]
        public System.Guid PolicyId { get; private set; }

        /// <summary>
        /// Gets the creation date of the Policy
        /// </summary>
        [JsonProperty(PropertyName = "properties.created")]
        public System.DateTimeOffset Created { get; private set; }

        /// <summary>
        /// Gets the last modified date of the Policy
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastModified")]
        public System.DateTimeOffset LastModified { get; private set; }

        /// <summary>
        /// Gets or sets a description for the Policy.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the Key Policy options.
        /// </summary>
        [JsonProperty(PropertyName = "properties.options")]
        public IList<ContentKeyPolicyOption> Options { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Options == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Options");
            }
            if (Options != null)
            {
                foreach (var element in Options)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
