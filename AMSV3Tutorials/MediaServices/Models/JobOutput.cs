// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// </auto-generated>

namespace Microsoft.Media.Encoding.Rest.ArmClient.Models
{
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Base class for the output of a Job.
    /// </summary>
    public partial class JobOutput
    {
        /// <summary>
        /// Initializes a new instance of the JobOutput class.
        /// </summary>
        public JobOutput()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobOutput class.
        /// </summary>
        /// <param name="error">If the JobOutput is in the error state, it
        /// contains the details of the error.</param>
        /// <param name="state">State of the JobOutput. Possible values
        /// include: 'Canceled', 'Canceling', 'Error', 'Finished',
        /// 'Processing', 'Queued', 'Scheduled'</param>
        /// <param name="progress">If the JobOutput is in the processing state,
        /// it contains the percentage of the job completed from 0 to 100
        /// percent.</param>
        public JobOutput(JobError error = default(JobError), JobState state = default(JobState), int progress = default(int))
        {
            Error = error;
            State = state;
            Progress = progress;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets if the JobOutput is in the error state, it contains the
        /// details of the error.
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public JobError Error { get; private set; }

        /// <summary>
        /// Gets state of the JobOutput. Possible values include: 'Canceled',
        /// 'Canceling', 'Error', 'Finished', 'Processing', 'Queued',
        /// 'Scheduled'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public JobState State { get; private set; }

        /// <summary>
        /// Gets if the JobOutput is in the processing state, it contains the
        /// percentage of the job completed from 0 to 100 percent.
        /// </summary>
        [JsonProperty(PropertyName = "progress")]
        public int Progress { get; private set; }

    }
}
